create table public.profiles (
  id bigint generated by default as identity not null,
  user_id uuid not null default auth.uid (),
  first_name character varying not null,
  last_name character varying not null,
  email character varying not null,
  created_at timestamp with time zone not null default now(),
  updated_at timestamp with time zone null,
  dob character varying null,
  username character varying not null,
  avatar character varying null,
  constraint profile_pkey primary key (id),
  constraint profiles_user_id_key unique (user_id),
  constraint profiles_user_id_fkey foreign KEY (user_id) references auth.users (id)
) TABLESPACE pg_default;

-- DROP TRIGGER on_auth_user_created ON auth.users;
-- DROP FUNCTION public.handle_new_user();

-- inserts a row into public.profile
create function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = ''
as $$
begin
  insert into public.profile (user_id, first_name, last_name, email, dob, username)
  values (new.id, new.raw_user_meta_data ->> 'first_name', new.raw_user_meta_data ->> 'last_name', new.email, new.raw_user_meta_data ->> 'date_of_birth', new.raw_user_meta_data ->> 'username');
  return new;
end;
$$;

-- trigger the function every time a user is created
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();


-- Create a storage bucket for avatars with public access and max size of 2MB
insert into storage.buckets (id, name, public, file_size_limit) values ('avatars', 'avatars', true, 2097152);

-- Create a policy to allow users to upload their own avatars
CREATE POLICY "Users can upload their own avatars"
ON storage.objects FOR INSERT
TO authenticated
WITH CHECK (
  bucket_id = 'avatars' AND 
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create a policy to allow users to view their own avatars
CREATE POLICY "Users can view their own avatars"
ON storage.objects FOR SELECT
TO authenticated
WITH CHECK (
  bucket_id = 'avatars' AND 
  (storage.foldername(name))[1] = auth.uid()::text  
);

-- Create a policy to allow users to delete their own avatars
CREATE POLICY "Users can delete their own avatars"
ON storage.objects FOR DELETE
TO authenticated
WITH CHECK (
  bucket_id = 'avatars' AND 
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create policy to allow users to update their own avatars
CREATE POLICY "Users can update their own avatars"
ON storage.objects FOR UPDATE
TO authenticated
WITH CHECK (
  bucket_id = 'avatars' AND 
  (storage.foldername(name))[1] = auth.uid()::text
);

-- Create feedbacks table
create table public.feedbacks (
  id bigint generated by default as identity not null,
  user_id uuid not null default auth.uid (),
  subject character varying not null,
  message character varying not null,
  created_at timestamp with time zone not null default now(),
  constraint feedbacks_pkey primary key (id),
  constraint feedbacks_id_key unique (id)
) TABLESPACE pg_default;

-- Create policy to allow users to add their own feedbacks
CREATE POLICY "Users can add their own feedbacks"
ON public.feedbacks FOR INSERT
TO authenticated
WITH CHECK (
  user_id = auth.uid()
);